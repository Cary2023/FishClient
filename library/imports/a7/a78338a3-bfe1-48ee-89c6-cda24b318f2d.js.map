{"version":3,"sources":["assets\\frames\\util\\localEncode\\cryptor.js"],"names":["crypto","require","helper","ALGORITHM","Cryptor","key","algorithm","Error","includes","join","constructor","hash","Object","defineProperties","value","iv","options","str","normalizeInput","cipher","createCipheriv","update","decipher","createDecipheriv","decoded","normalizeOutput","getCiphers","getHashes","createHash","digest","hasHash","indexOf","module","exports"],"mappings":"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","sourceRoot":"/","sourcesContent":["/**\r\n * Created by Fabio on 21/05/2017.\r\n */\r\nconst crypto = require('crypto');\r\nconst helper = require('./helper');\r\n//const deprecate = require('depreca');\r\nconst {ALGORITHM} = require('./constants');\r\n/**\r\n * Cryptor class\r\n */\r\nclass Cryptor {\r\n\r\n    /**\r\n     * Cryptor constructor\r\n     * @param key\r\n     * @param algorithm\r\n     */\r\n    constructor(key, algorithm = 'aes-256-cbc') {\r\n        if (typeof key !== 'string')\r\n            throw new Error('required an string key');\r\n\r\n        if (key === '')\r\n            throw new Error('key cannot be empty');\r\n\r\n        if (!ALGORITHM.includes(algorithm))\r\n            throw new Error(`algorithm ${algorithm} not supported, use those available: ${ALGORITHM.join(', ')}`);\r\n\r\n        // Transform to 32 chars\r\n        key = this.constructor.hash(key, 'md5');\r\n\r\n        Object.defineProperties(this, {\r\n            algorithm: {\r\n                value: algorithm\r\n            },\r\n            key: {\r\n                value: key\r\n            },\r\n            iv: {\r\n                value: \"zadeqxlallllaqer\"//key.substr(16)\r\n            },\r\n            options: {\r\n                value: {}\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Encode string\r\n     * @param str\r\n     * @return {string}\r\n     */\r\n    encode(str) {\r\n        str = helper.normalizeInput(str);\r\n        const cipher = crypto.createCipheriv(this.algorithm, this.key, this.iv, this.options);\r\n        return cipher.update(str, 'utf8', 'hex') + cipher.final('hex');\r\n    }\r\n\r\n    /**\r\n     * Decode string\r\n     * @param str\r\n     * @return {string}\r\n     */\r\n    decode(str) {\r\n        str = helper.normalizeInput(str);\r\n        const decipher = crypto.createDecipheriv(this.algorithm, this.key, this.iv, this.options);\r\n        const decoded = decipher.update(str, 'hex', 'utf8') + decipher.final('utf8');\r\n        return helper.normalizeOutput(decoded);\r\n    }\r\n\r\n    /**\r\n     * Get available ciphers\r\n     * @return {array}\r\n     */\r\n    static getCiphers() {\r\n        return crypto.getCiphers();\r\n    }\r\n\r\n    /**\r\n     * Get available hashes\r\n     * @return {array}\r\n     */\r\n    static getHashes() {\r\n        return crypto.getHashes();\r\n    }\r\n\r\n    /**\r\n     * MD5 hash\r\n     * @param str\r\n     * @returns {*}\r\n     * @deprecated\r\n     */\r\n    static md5(str) {\r\n        //deprecate('md5 is deprecated, use hash method instead. e.g. hash(\"your string\", \"md5\")');\r\n        return crypto.createHash('md5').update(str).digest('hex');\r\n    }\r\n\r\n    /**\r\n     * SHA1 hash\r\n     * @param str\r\n     * @returns {*}\r\n     * @deprecated\r\n     */\r\n    static sha1(str) {\r\n        //deprecate('sha1 is deprecated, use hash method instead. e.g. hash(\"your string\", \"sha1\")');\r\n        return crypto.createHash('sha1').update(str).digest('hex');\r\n    }\r\n\r\n    /**\r\n     * Creates hash of an string based on available hashes of platform\r\n     * @param str\r\n     * @param hash\r\n     * @returns {*}\r\n     */\r\n    static hash(str, hash) {\r\n        if (Cryptor.hasHash(hash)) {\r\n            return crypto.createHash(hash).update(str).digest('hex');\r\n        } else {\r\n            throw new Error('hash ' + hash + ' not found in your platform')\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check if hash exists\r\n     * @param hash\r\n     * @returns {boolean}\r\n     */\r\n    static hasHash(hash) {\r\n        return Cryptor.getHashes().indexOf(hash) !== -1;\r\n    }\r\n}\r\n\r\nmodule.exports = Cryptor;\r\n\r\n"]}