
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/modules/plaza/script/prefab/withdrawal/backWaterRule.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'bdf93UW5XFFTq6bdu4Drdwh', 'backWaterRule');
// modules/plaza/script/prefab/withdrawal/backWaterRule.js

"use strict";

glGame.baseclass.extend({
  properties: {
    content: cc.Node,
    item: cc.Node,
    curPage: cc.Label,
    totalPage: cc.Label
  },
  // LIFE-CYCLE CALLBACKS:
  onLoad: function onLoad() {
    this.page = 1;
    this.record = {};
    this.reqWithdrawDiscount();
  },
  onClick: function onClick(name, node) {
    switch (name) {
      case "btn_close":
        this.remove();
        break;

      case "btn_upPage":
        this.upPage();
        break;

      case "btn_downPage":
        this.downPage();
        break;
    }
  },
  reqWithdrawDiscount: function reqWithdrawDiscount() {
    var _this = this;

    if (this.record[this.page]) {
      this.curPage.string = this.page;
      this.updateItem(this.record[this.page]);
      return;
    }

    glGame.gameNet.send_msg("http.reqWithdrawDiscount", {
      page: this.page,
      page_size: 8
    }, function (route, data) {
      _this.totalPage.string = data.result.total_page;
      _this.curPage.string = _this.page;
      _this.record[_this.page] = data;

      _this.updateItem(data);
    });
  },
  updateItem: function updateItem(data) {
    this.content.destroyAllChildren();
    this.content.removeAllChildren();
    var list = data.result.list;

    for (var i = 0; i < list.length; i++) {
      var panel = cc.instantiate(this.item);
      panel.parent = this.content;
      var bg = panel.getChildByName("bg");
      var time = panel.getChildByName("time").getComponent(cc.Label);
      var type = panel.getChildByName("type").getComponent(cc.Label);
      var coinNumber = panel.getChildByName("coinNumber").getComponent(cc.Label);
      var state = panel.getChildByName("state").getComponent(cc.Label);
      var waterAsk = panel.getChildByName("waterAsk").getComponent(cc.RichText); // let current_flow = panel.getChildByName("waterAsk").getChildByName("lab_one").getComponent(cc.Label);
      // let need_flow = panel.getChildByName("waterAsk").getChildByName("lab_two").getComponent(cc.Label);

      bg.active = i % 2 != 0;
      var timeStamp = new Date(list[i].rechargeTimeStamp * 1000);
      var strTime = "".concat(timeStamp.getFullYear(), "/").concat(timeStamp.getMonth() + 1 >= 10 ? timeStamp.getMonth() + 1 : "0" + (timeStamp.getMonth() + 1), "/").concat(timeStamp.getDate() >= 10 ? timeStamp.getDate() : '0' + timeStamp.getDate());
      strTime += "\uFF08".concat(glGame.tips.WEEKNAME[timeStamp.getDay()], "\uFF09");
      strTime += "".concat(timeStamp.getHours() >= 10 ? timeStamp.getHours() : "0" + timeStamp.getHours(), ":");
      strTime += "".concat(timeStamp.getMinutes() >= 10 ? timeStamp.getMinutes() : "0" + timeStamp.getMinutes(), ":");
      strTime += "".concat(timeStamp.getSeconds() >= 10 ? timeStamp.getSeconds() : "0" + timeStamp.getSeconds());
      time.string = strTime;
      type.string = list[i].source;
      coinNumber.string = this.getFloat(list[i].coin) + "元";

      if (list[i].current_flow == list[i].need_flow) {
        waterAsk.string = "<color=#00ff18>".concat(this.getFloat(list[i].current_flow), "</c>/").concat(this.getFloat(list[i].need_flow));
      } else {
        waterAsk.string = "<color=#dc4848>".concat(this.getFloat(list[i].current_flow), "</c>/").concat(this.getFloat(list[i].need_flow));
      }

      state.node.color = list[i].current_flow == list[i].need_flow ? cc.color(0, 255, 24) : cc.color(220, 72, 72);
      state.string = list[i].type; //panel.active = true;
    }

    this.node.getChildByName("tip").active = list.length > 0;
    this.node.getChildByName("btn_downPage").active = list.length > 0;
    this.node.getChildByName("btn_upPage").active = list.length > 0;
    this.node.getChildByName("pageLayout").active = list.length > 0;
    this.node.getChildByName("img_wujilu").active = list.length == 0;
    glGame.panel.showEffectNode(this, this.content, 0.01, true);
  },
  //桌面数据的显示
  getFloat: function getFloat(value) {
    return Number(value).div(100).toString();
  },
  set: function set(key, value) {
    this[key] = value;
  },
  upPage: function upPage() {
    if (this.page - 1 < 1) {
      return;
    }

    this.page--;
    this.reqWithdrawDiscount();
  },
  downPage: function downPage() {
    if (this.page + 1 > Number(this.totalPage.string)) {
      return;
    }

    this.page++;
    this.reqWithdrawDiscount();
  },
  OnDestroy: function OnDestroy() {} // update (dt) {},

});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcbW9kdWxlc1xccGxhemFcXHNjcmlwdFxccHJlZmFiXFx3aXRoZHJhd2FsXFxiYWNrV2F0ZXJSdWxlLmpzIl0sIm5hbWVzIjpbImdsR2FtZSIsImJhc2VjbGFzcyIsImV4dGVuZCIsInByb3BlcnRpZXMiLCJjb250ZW50IiwiY2MiLCJOb2RlIiwiaXRlbSIsImN1clBhZ2UiLCJMYWJlbCIsInRvdGFsUGFnZSIsIm9uTG9hZCIsInBhZ2UiLCJyZWNvcmQiLCJyZXFXaXRoZHJhd0Rpc2NvdW50Iiwib25DbGljayIsIm5hbWUiLCJub2RlIiwicmVtb3ZlIiwidXBQYWdlIiwiZG93blBhZ2UiLCJzdHJpbmciLCJ1cGRhdGVJdGVtIiwiZ2FtZU5ldCIsInNlbmRfbXNnIiwicGFnZV9zaXplIiwicm91dGUiLCJkYXRhIiwicmVzdWx0IiwidG90YWxfcGFnZSIsImRlc3Ryb3lBbGxDaGlsZHJlbiIsInJlbW92ZUFsbENoaWxkcmVuIiwibGlzdCIsImkiLCJsZW5ndGgiLCJwYW5lbCIsImluc3RhbnRpYXRlIiwicGFyZW50IiwiYmciLCJnZXRDaGlsZEJ5TmFtZSIsInRpbWUiLCJnZXRDb21wb25lbnQiLCJ0eXBlIiwiY29pbk51bWJlciIsInN0YXRlIiwid2F0ZXJBc2siLCJSaWNoVGV4dCIsImFjdGl2ZSIsInRpbWVTdGFtcCIsIkRhdGUiLCJyZWNoYXJnZVRpbWVTdGFtcCIsInN0clRpbWUiLCJnZXRGdWxsWWVhciIsImdldE1vbnRoIiwiZ2V0RGF0ZSIsInRpcHMiLCJXRUVLTkFNRSIsImdldERheSIsImdldEhvdXJzIiwiZ2V0TWludXRlcyIsImdldFNlY29uZHMiLCJzb3VyY2UiLCJnZXRGbG9hdCIsImNvaW4iLCJjdXJyZW50X2Zsb3ciLCJuZWVkX2Zsb3ciLCJjb2xvciIsInNob3dFZmZlY3ROb2RlIiwidmFsdWUiLCJOdW1iZXIiLCJkaXYiLCJ0b1N0cmluZyIsInNldCIsImtleSIsIk9uRGVzdHJveSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7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QixvQkE4RVhNLEtBOUVXLEVBOEVKO0FBQ1osV0FBUUMsTUFBTSxDQUFDRCxLQUFELENBQU4sQ0FBY0UsR0FBZCxDQUFrQixHQUFsQixDQUFELENBQXlCQyxRQUF6QixFQUFQO0FBQ0gsR0FoRm1CO0FBaUZwQkMsRUFBQUEsR0FqRm9CLGVBaUZoQkMsR0FqRmdCLEVBaUZYTCxLQWpGVyxFQWlGSjtBQUNaLFNBQUtLLEdBQUwsSUFBWUwsS0FBWjtBQUNILEdBbkZtQjtBQW9GcEJqRCxFQUFBQSxNQXBGb0Isb0JBb0ZYO0FBQ0wsUUFBSSxLQUFLUCxJQUFMLEdBQVksQ0FBWixHQUFnQixDQUFwQixFQUF1QjtBQUNuQjtBQUNIOztBQUNELFNBQUtBLElBQUw7QUFDQSxTQUFLRSxtQkFBTDtBQUNILEdBMUZtQjtBQTJGcEJNLEVBQUFBLFFBM0ZvQixzQkEyRlQ7QUFDUCxRQUFJLEtBQUtSLElBQUwsR0FBWSxDQUFaLEdBQWdCeUQsTUFBTSxDQUFDLEtBQUszRCxTQUFMLENBQWVXLE1BQWhCLENBQTFCLEVBQW1EO0FBQy9DO0FBQ0g7O0FBQ0QsU0FBS1QsSUFBTDtBQUNBLFNBQUtFLG1CQUFMO0FBQ0gsR0FqR21CO0FBa0dwQjRELEVBQUFBLFNBbEdvQix1QkFrR1IsQ0FFWCxDQXBHbUIsQ0FxR3BCOztBQXJHb0IsQ0FBeEIiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbIlxyXG5nbEdhbWUuYmFzZWNsYXNzLmV4dGVuZCh7XHJcblxyXG4gICAgcHJvcGVydGllczoge1xyXG4gICAgICAgIGNvbnRlbnQ6IGNjLk5vZGUsXHJcbiAgICAgICAgaXRlbTogY2MuTm9kZSxcclxuICAgICAgICBjdXJQYWdlOiBjYy5MYWJlbCxcclxuICAgICAgICB0b3RhbFBhZ2U6IGNjLkxhYmVsLFxyXG4gICAgfSxcclxuXHJcbiAgICAvLyBMSUZFLUNZQ0xFIENBTExCQUNLUzpcclxuXHJcbiAgICBvbkxvYWQoKSB7XHJcbiAgICAgICAgdGhpcy5wYWdlID0gMVxyXG4gICAgICAgIHRoaXMucmVjb3JkID0ge307XHJcbiAgICAgICAgdGhpcy5yZXFXaXRoZHJhd0Rpc2NvdW50KCk7XHJcbiAgICB9LFxyXG4gICAgb25DbGljayhuYW1lLCBub2RlKSB7XHJcbiAgICAgICAgc3dpdGNoIChuYW1lKSB7XHJcbiAgICAgICAgICAgIGNhc2UgXCJidG5fY2xvc2VcIjogdGhpcy5yZW1vdmUoKTsgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJidG5fdXBQYWdlXCI6dGhpcy51cFBhZ2UoKTticmVhaztcclxuICAgICAgICAgICAgY2FzZSBcImJ0bl9kb3duUGFnZVwiOnRoaXMuZG93blBhZ2UoKTticmVhaztcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgcmVxV2l0aGRyYXdEaXNjb3VudCgpIHtcclxuICAgICAgICBpZiAodGhpcy5yZWNvcmRbdGhpcy5wYWdlXSkge1xyXG4gICAgICAgICAgICB0aGlzLmN1clBhZ2Uuc3RyaW5nID0gdGhpcy5wYWdlO1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUl0ZW0odGhpcy5yZWNvcmRbdGhpcy5wYWdlXSk7XHJcbiAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgIH1cclxuICAgICAgICBnbEdhbWUuZ2FtZU5ldC5zZW5kX21zZyhcImh0dHAucmVxV2l0aGRyYXdEaXNjb3VudFwiLCB7IHBhZ2U6IHRoaXMucGFnZSwgcGFnZV9zaXplOiA4IH0sIChyb3V0ZSwgZGF0YSkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnRvdGFsUGFnZS5zdHJpbmcgPSBkYXRhLnJlc3VsdC50b3RhbF9wYWdlO1xyXG4gICAgICAgICAgICB0aGlzLmN1clBhZ2Uuc3RyaW5nID0gdGhpcy5wYWdlO1xyXG4gICAgICAgICAgICB0aGlzLnJlY29yZFt0aGlzLnBhZ2VdID0gZGF0YTtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVJdGVtKGRhdGEpO1xyXG4gICAgICAgIH0pXHJcbiAgICB9LFxyXG4gICAgdXBkYXRlSXRlbShkYXRhKSB7XHJcbiAgICAgICAgdGhpcy5jb250ZW50LmRlc3Ryb3lBbGxDaGlsZHJlbigpO1xyXG4gICAgICAgIHRoaXMuY29udGVudC5yZW1vdmVBbGxDaGlsZHJlbigpO1xyXG4gICAgICAgIGxldCBsaXN0ID0gZGF0YS5yZXN1bHQubGlzdDtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgbGV0IHBhbmVsID0gY2MuaW5zdGFudGlhdGUodGhpcy5pdGVtKTtcclxuICAgICAgICAgICAgcGFuZWwucGFyZW50ID0gdGhpcy5jb250ZW50O1xyXG4gICAgICAgICAgICBsZXQgYmcgPSBwYW5lbC5nZXRDaGlsZEJ5TmFtZShcImJnXCIpXHJcbiAgICAgICAgICAgIGxldCB0aW1lID0gcGFuZWwuZ2V0Q2hpbGRCeU5hbWUoXCJ0aW1lXCIpLmdldENvbXBvbmVudChjYy5MYWJlbCk7XHJcbiAgICAgICAgICAgIGxldCB0eXBlID0gcGFuZWwuZ2V0Q2hpbGRCeU5hbWUoXCJ0eXBlXCIpLmdldENvbXBvbmVudChjYy5MYWJlbCk7XHJcbiAgICAgICAgICAgIGxldCBjb2luTnVtYmVyID0gcGFuZWwuZ2V0Q2hpbGRCeU5hbWUoXCJjb2luTnVtYmVyXCIpLmdldENvbXBvbmVudChjYy5MYWJlbCk7XHJcbiAgICAgICAgICAgIGxldCBzdGF0ZSA9IHBhbmVsLmdldENoaWxkQnlOYW1lKFwic3RhdGVcIikuZ2V0Q29tcG9uZW50KGNjLkxhYmVsKTtcclxuICAgICAgICAgICAgbGV0IHdhdGVyQXNrID0gcGFuZWwuZ2V0Q2hpbGRCeU5hbWUoXCJ3YXRlckFza1wiKS5nZXRDb21wb25lbnQoY2MuUmljaFRleHQpO1xyXG4gICAgICAgICAgICAvLyBsZXQgY3VycmVudF9mbG93ID0gcGFuZWwuZ2V0Q2hpbGRCeU5hbWUoXCJ3YXRlckFza1wiKS5nZXRDaGlsZEJ5TmFtZShcImxhYl9vbmVcIikuZ2V0Q29tcG9uZW50KGNjLkxhYmVsKTtcclxuICAgICAgICAgICAgLy8gbGV0IG5lZWRfZmxvdyA9IHBhbmVsLmdldENoaWxkQnlOYW1lKFwid2F0ZXJBc2tcIikuZ2V0Q2hpbGRCeU5hbWUoXCJsYWJfdHdvXCIpLmdldENvbXBvbmVudChjYy5MYWJlbCk7XHJcbiAgICAgICAgICAgIGJnLmFjdGl2ZSA9IGkgJSAyICE9IDA7XHJcbiAgICAgICAgICAgIGxldCB0aW1lU3RhbXAgPSBuZXcgRGF0ZShsaXN0W2ldLnJlY2hhcmdlVGltZVN0YW1wICogMTAwMCk7XHJcbiAgICAgICAgICAgIGxldCBzdHJUaW1lID0gYCR7dGltZVN0YW1wLmdldEZ1bGxZZWFyKCl9LyR7dGltZVN0YW1wLmdldE1vbnRoKCkgKyAxID49IDEwID8gdGltZVN0YW1wLmdldE1vbnRoKCkgKyAxIDogXCIwXCIgKyAodGltZVN0YW1wLmdldE1vbnRoKCkgKyAxKX0vJHt0aW1lU3RhbXAuZ2V0RGF0ZSgpID49IDEwID8gdGltZVN0YW1wLmdldERhdGUoKSA6ICcwJyArIHRpbWVTdGFtcC5nZXREYXRlKCl9YFxyXG4gICAgICAgICAgICBzdHJUaW1lICs9IGDvvIgke2dsR2FtZS50aXBzLldFRUtOQU1FW3RpbWVTdGFtcC5nZXREYXkoKV1977yJYFxyXG4gICAgICAgICAgICBzdHJUaW1lICs9IGAke3RpbWVTdGFtcC5nZXRIb3VycygpID49IDEwID8gdGltZVN0YW1wLmdldEhvdXJzKCkgOiBcIjBcIiArIHRpbWVTdGFtcC5nZXRIb3VycygpfTpgXHJcbiAgICAgICAgICAgIHN0clRpbWUgKz0gYCR7dGltZVN0YW1wLmdldE1pbnV0ZXMoKSA+PSAxMCA/IHRpbWVTdGFtcC5nZXRNaW51dGVzKCkgOiBcIjBcIiArIHRpbWVTdGFtcC5nZXRNaW51dGVzKCl9OmBcclxuICAgICAgICAgICAgc3RyVGltZSArPSBgJHt0aW1lU3RhbXAuZ2V0U2Vjb25kcygpID49IDEwID8gdGltZVN0YW1wLmdldFNlY29uZHMoKSA6IFwiMFwiICsgdGltZVN0YW1wLmdldFNlY29uZHMoKX1gXHJcbiAgICAgICAgICAgIHRpbWUuc3RyaW5nID0gc3RyVGltZTtcclxuICAgICAgICAgICAgdHlwZS5zdHJpbmcgPSBsaXN0W2ldLnNvdXJjZTtcclxuICAgICAgICAgICAgY29pbk51bWJlci5zdHJpbmcgPSB0aGlzLmdldEZsb2F0KGxpc3RbaV0uY29pbikrXCLlhYNcIjtcclxuICAgICAgICAgICAgaWYobGlzdFtpXS5jdXJyZW50X2Zsb3cgPT0gbGlzdFtpXS5uZWVkX2Zsb3cpe1xyXG4gICAgICAgICAgICAgICAgd2F0ZXJBc2suc3RyaW5nID0gYDxjb2xvcj0jMDBmZjE4PiR7dGhpcy5nZXRGbG9hdChsaXN0W2ldLmN1cnJlbnRfZmxvdyl9PC9jPi8ke3RoaXMuZ2V0RmxvYXQobGlzdFtpXS5uZWVkX2Zsb3cpfWBcclxuICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICB3YXRlckFzay5zdHJpbmcgPSBgPGNvbG9yPSNkYzQ4NDg+JHt0aGlzLmdldEZsb2F0KGxpc3RbaV0uY3VycmVudF9mbG93KX08L2M+LyR7dGhpcy5nZXRGbG9hdChsaXN0W2ldLm5lZWRfZmxvdyl9YFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHN0YXRlLm5vZGUuY29sb3IgPSBsaXN0W2ldLmN1cnJlbnRfZmxvdyA9PSBsaXN0W2ldLm5lZWRfZmxvdz9jYy5jb2xvcigwLDI1NSwyNCk6Y2MuY29sb3IoMjIwLDcyLDcyKTtcclxuICAgICAgICAgICAgc3RhdGUuc3RyaW5nID0gbGlzdFtpXS50eXBlO1xyXG4gICAgICAgICAgICAvL3BhbmVsLmFjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMubm9kZS5nZXRDaGlsZEJ5TmFtZShcInRpcFwiKS5hY3RpdmUgPSBsaXN0Lmxlbmd0aCA+IDA7XHJcbiAgICAgICAgdGhpcy5ub2RlLmdldENoaWxkQnlOYW1lKFwiYnRuX2Rvd25QYWdlXCIpLmFjdGl2ZSA9IGxpc3QubGVuZ3RoID4gMDtcclxuICAgICAgICB0aGlzLm5vZGUuZ2V0Q2hpbGRCeU5hbWUoXCJidG5fdXBQYWdlXCIpLmFjdGl2ZSA9IGxpc3QubGVuZ3RoID4gMDtcclxuICAgICAgICB0aGlzLm5vZGUuZ2V0Q2hpbGRCeU5hbWUoXCJwYWdlTGF5b3V0XCIpLmFjdGl2ZSA9IGxpc3QubGVuZ3RoID4gMDtcclxuICAgICAgICB0aGlzLm5vZGUuZ2V0Q2hpbGRCeU5hbWUoXCJpbWdfd3VqaWx1XCIpLmFjdGl2ZSA9IGxpc3QubGVuZ3RoID09IDA7XHJcbiAgICAgICAgZ2xHYW1lLnBhbmVsLnNob3dFZmZlY3ROb2RlKHRoaXMsdGhpcy5jb250ZW50LDAuMDEsdHJ1ZSlcclxuICAgIH0sXHJcbiAgICAvL+ahjOmdouaVsOaNrueahOaYvuekulxyXG4gICAgZ2V0RmxvYXQodmFsdWUpIHtcclxuICAgICAgICByZXR1cm4gKE51bWJlcih2YWx1ZSkuZGl2KDEwMCkpLnRvU3RyaW5nKCk7XHJcbiAgICB9LFxyXG4gICAgc2V0KGtleSwgdmFsdWUpIHtcclxuICAgICAgICB0aGlzW2tleV0gPSB2YWx1ZTtcclxuICAgIH0sXHJcbiAgICB1cFBhZ2UoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMucGFnZSAtIDEgPCAxKSB7XHJcbiAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnBhZ2UtLTtcclxuICAgICAgICB0aGlzLnJlcVdpdGhkcmF3RGlzY291bnQoKTtcclxuICAgIH0sXHJcbiAgICBkb3duUGFnZSgpIHtcclxuICAgICAgICBpZiAodGhpcy5wYWdlICsgMSA+IE51bWJlcih0aGlzLnRvdGFsUGFnZS5zdHJpbmcpKSB7XHJcbiAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnBhZ2UrKztcclxuICAgICAgICB0aGlzLnJlcVdpdGhkcmF3RGlzY291bnQoKTtcclxuICAgIH0sXHJcbiAgICBPbkRlc3Ryb3koKSB7XHJcblxyXG4gICAgfVxyXG4gICAgLy8gdXBkYXRlIChkdCkge30sXHJcbn0pO1xyXG4iXX0=