{"version":3,"sources":["assets\\modules\\login\\script\\prefab\\update_bag.js"],"names":["glGame","baseclass","extend","properties","progress_bar","cc","ProgressBar","progress","Label","onLoad","string","schedule","updateProgress","bind","load_size","load_count","bag_size","move_count","start","data","platform","UpdateProgress","size","load","Math","ceil","director","getDeltaTime","console","log","update","dt","min"],"mappings":";;;;;;AACAA,MAAM,CAACC,SAAP,CAAiBC,MAAjB,CAAwB;AACpBC,EAAAA,UAAU,EAAE;AACRC,IAAAA,YAAY,EAAEC,EAAE,CAACC,WADT;AAERC,IAAAA,QAAQ,EAAEF,EAAE,CAACG;AAFL,GADQ;AAKpBC,EAAAA,MALoB,oBAKX;AACL,SAAKL,YAAL,CAAkBG,QAAlB,GAA6B,CAA7B;AACA,SAAKA,QAAL,CAAcG,MAAd,GAAuB,IAAvB;AACA,SAAKC,QAAL,CAAc,KAAKC,cAAL,CAAoBC,IAApB,CAAyB,IAAzB,CAAd,EAA8C,CAA9C;AACA,SAAKC,SAAL,GAAiB,CAAjB;AACA,SAAKC,UAAL,GAAkB,CAAlB;AACA,SAAKC,QAAL,GAAgB,CAAhB;AACA,SAAKC,UAAL,GAAkB,CAAlB;AAEH,GAdmB;AAgBpBC,EAAAA,KAhBoB,mBAgBZ,CAEP,CAlBmB;AAoBpBN,EAAAA,cApBoB,4BAoBH;AACb,QAAIO,IAAI,GAAGnB,MAAM,CAACoB,QAAP,CAAgBC,cAAhB,EAAX;;AACA,QAAIF,IAAI,IAAIA,IAAI,CAACG,IAAb,IAAqBH,IAAI,CAACI,IAA9B,EAAoC;AAChC,UAAI,KAAKT,SAAL,IAAkBK,IAAI,CAACI,IAA3B,EAAiC,KAAKN,UAAL,GAAkBO,IAAI,CAACC,IAAL,CAAU,CAACN,IAAI,CAACI,IAAL,GAAY,KAAKR,UAAlB,KAAiC,IAAEV,EAAE,CAACqB,QAAH,CAAYC,YAAZ,EAAnC,CAAV,CAAlB;AACjCC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKZ,UAAjB;AACA,WAAKH,SAAL,GAAiBK,IAAI,CAACI,IAAtB;AACA,WAAKP,QAAL,GAAgBG,IAAI,CAACG,IAArB;AACH;AACJ,GA5BmB;AA8BpBQ,EAAAA,MA9BoB,kBA8BbC,EA9Ba,EA8BT;AACP,QAAI,KAAKf,QAAL,IAAiB,CAAjB,IAAsB,KAAKF,SAAL,IAAkB,CAA5C,EAA+C;AAC/C,QAAI,KAAKA,SAAL,IAAkB,KAAKC,UAA3B,EAAuC;AACvC,SAAKA,UAAL,IAAmB,KAAKE,UAAxB;AACA,SAAKF,UAAL,GAAkBS,IAAI,CAACQ,GAAL,CAAS,KAAKjB,UAAd,EAA0B,KAAKD,SAA/B,CAAlB;AACA,QAAI,KAAKA,SAAL,IAAkB,KAAKE,QAA3B,EAAqC,KAAKD,UAAL,GAAkB,KAAKC,QAAvB;AACrC,SAAKZ,YAAL,CAAkBG,QAAlB,GAA6B,KAAKQ,UAAL,GAAkB,KAAKC,QAApD;AACA,SAAKT,QAAL,CAAcG,MAAd,cAA2B,KAAKK,UAAhC,cAA8C,KAAKC,QAAnD;AACH;AAtCmB,CAAxB","sourceRoot":"/","sourcesContent":["\r\nglGame.baseclass.extend({\r\n    properties: {\r\n        progress_bar: cc.ProgressBar,\r\n        progress: cc.Label,\r\n    },\r\n    onLoad() {\r\n        this.progress_bar.progress = 0;\r\n        this.progress.string = '()';\r\n        this.schedule(this.updateProgress.bind(this), 1);\r\n        this.load_size = 0;\r\n        this.load_count = 0;\r\n        this.bag_size = 0;\r\n        this.move_count = 0;\r\n\r\n    },\r\n\r\n    start() {\r\n\r\n    },\r\n\r\n    updateProgress() {\r\n        let data = glGame.platform.UpdateProgress();\r\n        if (data && data.size && data.load) {\r\n            if (this.load_size != data.load) this.move_count = Math.ceil((data.load - this.load_count) / (1/cc.director.getDeltaTime()));\r\n            console.log(this.move_count);\r\n            this.load_size = data.load;\r\n            this.bag_size = data.size;\r\n        }\r\n    },\r\n\r\n    update(dt) {\r\n        if (this.bag_size == 0 || this.load_size == 0) return;\r\n        if (this.load_size == this.load_count) return;\r\n        this.load_count += this.move_count;\r\n        this.load_count = Math.min(this.load_count, this.load_size);\r\n        if (this.load_size == this.bag_size) this.load_count = this.bag_size;\r\n        this.progress_bar.progress = this.load_count / this.bag_size;\r\n        this.progress.string = `(${this.load_count}/${this.bag_size})...`;\r\n    },\r\n});\r\n"]}